# File:        proj1.py
# Author:      Robert Rose
# Date:        11/10/15
# Section:     11
# E-mail:      robrose2@umbc.edu
# Description: This program is an implementation of Conway's game of life.
#              It takes relevant data from the user to construct a game
#              board and allows a user to cycle through the game.


LIVE = "A"
DEAD = "."

# Main function to run code.
def main():

    print("Welcome to Conway's game of life! Please provide relevant information requested.")

    # Get number of rows on the board.
    rows = int(input("Please input the number of rows (min. 1): "))
    while rows < 1:
        rows = int(input("Invalid input. Please input the number of rows (min. 1): "))

    # Get number of columns on the board.
    cols = int(input("Please input the number of columns (min. 1): "))
    while cols < 1:
        cols = int(input("Invalid input. Please input the number of columns (min. 1): "))
    
    print("\nTime to breathe life into these cells. Enter the information to set a cell to alive.\n")

    board = constructBoard(cols, rows)

    # Set cells alive
    rowAlive = input("Choose a cell's y-coordinate or 'q' to quit: ")
    while rowAlive != 'q':
        rowAlive = int(rowAlive)
        while not (0 <= rowAlive < rows):
            rowAlive = int(input("Out of range. Choose a cell's y-coordinat: "))
        
        colAlive = int(input("Choose a cell's x-coordinate: "))
        while not (0 <= colAlive < cols):
            colAlive = int(input("Out of range. Choose a cell's x-coordinate: "))
       
        board[rowAlive][colAlive] = LIVE
        print("Let there be life!\n")
        
        rowAlive = input("Choose a cell's y-coordinate or 'q' to quit: ")
        
    iterations = int(input("How many iterations should I run? (min. 0): "))
    while(iterations < 0):
        iterations = int(input("Invalid input. Please enter a number of iterations. (min 0): "))
    
    print("Starting Board:\n\n")
    printBoard(board)
    on = 0

    # Iteration time.
    while(on < iterations):
        on += 1
        print("Iteration", on)
        nextIteration(board)
        printBoard(board)

# Prints the contents of the board out using for loops.
def printBoard(board):
    for row in board:
        rowStr = ""
        for col in row:
            rowStr += col
        print(rowStr)
    print("\n")

# Generates a board and fills it with periods
def constructBoard(width, height):
    board = [[DEAD for x in range(width)] for y in range(height)]
    return board

# Returns the number of live neighbors of a specified cell.
def liveNeighbors(board, x, y):
    count = 0

    # Check north
    if(y > 0):
        count += 1 if board[y - 1][x] == LIVE else 0
    
    # Check east
    if(x < len(board[y]) - 1):
        count += 1 if board[y][x + 1] == LIVE else 0

    # Check south
    if(y < len(board) - 1):
        count += 1 if board[y + 1][x] == LIVE else 0

    # Check west
    if(x > 0):
        count += 1 if board[y][x - 1] == LIVE else 0

    return count
        
# Checks to see if a cell is going to be alive or dead next generation based
# on the rules of the game.
def cellIsLive(neighborCount, liveNow):
    if(liveNow):
        if(neighborCount < 2):
            return False
        elif(2 <= neighborCount <= 3):
            return True
        elif(neighborCount > 3):
            return False
    else:
        if(neighborCount == 3):
            return True
        else:
            return False

# This performs each iteration on the board
def nextIteration(board):
    checkBoard = [row[:] for row in board]
    
    for y in range(len(checkBoard)):
        for x in range(len(checkBoard[y])):
            neighborCount = liveNeighbors(checkBoard, x, y)
            board[y][x] = LIVE if  cellIsLive(neighborCount, checkBoard[y][x]) else DEAD
    

main()
